# Importations des librairies n√©cessaires
from random import randint
import os
import sys
import random
from IPython.display import clear_output
import time
import unicodedata
def tim10 ():
  time.sleep(10)
  clear_output()
def tim5 ():
  time.sleep(5)
  clear_output()
def clear():
  clear_output()
  time.sleep(.01)


# Main
def main():
    # Main menu
    leaveGame = False
    while leaveGame == False:
      print()
      print("  ÿßŸÑÿ±ŸÇ ŸàÿßŸÑÿßÿ™ÿ¨ÿßÿ± ÿ®ÿßŸÑÿ±ŸÇŸäŸÇ ÿ®ÿ¨ŸÖŸäÿπ ÿµŸàÿ±ŸáŸÖÿß ")
      print()
      print("           üèúÔ∏è DUNE 2020  ")
      print()
      print("           .: 1¬∞ Jouer")
      print("           .: 2¬∞ Reprendre")
      print("           .: 3¬∞ √Ä propos")
      print("           .: 4¬∞ Sortir")
      print()
      print(" Ÿäÿ¨Ÿàÿ≤ ÿßÿ≥ÿ™ÿ±ŸÇÿßŸÇ ÿ£ÿ≠ÿØ ÿ£Ÿà ÿßÿ≥ÿ™ÿπÿ®ÿßÿØŸáÿå ŸàŸäÿ≠ÿ∏ÿ± ")
      print()
      option = input(" > ")
      if option == "1":
        playGame(True)
      elif option == "2":
        print("\n Nous ne pouvons pas le faire sur Colab...")
        time.sleep(2)
        main()
        
      elif option == "3":
        credit()
      elif option == "4":
        clear_output()
        print("√ätes-vous s√ªr de vouloir quitter le jeu?")
        print("1¬∞ Oui")
        print("2¬∞ Non")
        option = input(" \n> ")
        if option == "1":
          clear_output()
          print("Fin du Programme, √† bient√¥t...")
          SystemExit
        elif option == "2":
          main()
        else:
          clear_output()
          print("! Erreur veuillez choisir la bonne option !")
          time.sleep(3)
          clear_output()
          main()
      else:
        clear_output()
        print(" ! Erreur veuillez choisir la bonne option !")
        time.sleep(3)
        clear_output()
        main()
def credit ():
  clear()
  print("\n    R√©alis√© par : Amine NAIRI et Nassim YAZI, √©tudiants en WEB1 √† HETIC")

  print("\n Nous sommes fi√®res d‚Äôavoir r√©alis√© ce projet, un jeu de r√¥le inspir√© du roman Dune de Frank Herbert et du film Azur et Asmar.")
  print(" La consigne fut donn√©e par notre intervenant Loic JANIN. Ce projet nous a fait m√ªrir, progresser en python et dans le travail de groupe.")
  print(" Temps de r√©alisation, 2 mois.")
  print(" Vous y d√©couvrirez un monde qui ressemble √©trangement au d√©sert alg√©rien, pour un l√©ger clin d'≈ìil √† nos origines.")

  print("\n Essayez de trouver tous les Easter Eggs ;)")

  print("\n  Remerciement vont √† :")
  print(" un proche d‚ÄôAmine pour son aide dans la r√©flexion sur la partie code, et Loic JANIN pour la transmission de son savoir...")
  print("\n\n Petit cadeau : https://www.youtube.com/watch?v=ZOfZAf77HUA")
  print("\n\n    Tout droit r√©serv√©‚Ä¶")
  input("\n      appuyer sur entrer pour retouner au menu")
  clear()
  main()

# Cette fonction est appel√© pour jouer une partie (nouvellement cr√©√©e ou charg√©e)
def playGame(newGame):
    # General objects
    inventoryObject_PotionHealth = {"name": "Health Potion", "type": "potion", "healthPointsGained": 25}
    inventoryObject_AttackBoost = {"name": "Attack Boost", "type": "atkBoost", "boostValue": 25}
    inventoryObject_DefenseBoost = {"name": "Defense Boost", "type": "defBoost", "boostValue": 25}

    bossPositionOnMap = {"coordX" : 0, "coordY" : 2}
    boss = {"name" : "Ver des sables",
            "level" : 5,
            "health": 200,
            "attack": 150,
            "defense": 150}

    basicEnnemy = {"name": "Contre-Bandier",
                   "level" : 1,
                   "health": 50,
                   "attack": 75,
                   "defense": 75}

    mediumEnnemy = {"name": "Orc",
                   "level": 2,
                   "health": 75,
                   "attack": 100,
                   "defense": 100}

    hardEnnemy = {"name": "Corrinos",
                   "level": 3,
                   "health": 100,
                   "attack": 125,
                   "defense": 125}

    # If new game, we initialise the main objects like the character stats and the map
    if newGame == True:
      def pre_intro ():
        def ask_gamer_name ():
          clear()
          print("\n  Salut √† toi jeune aventurier !!")
          print("    Dis moi, quel est ton nom ?")
          option = input(" \n> ")
          global PlayerID
          PlayerID = option
        ask_gamer_name()
        clear()
        print("\n Bienvenue", PlayerID,", tu vas entrer dans un monde merveilleux et plein de surprises t'attendent...")
        input("\n       (Appuie sur entrer pour commencer) ")
      pre_intro()
      clear()
      #opening Crawl
      def OpeningCrawl ():
        clear()
        print('\033[36m'+"\n\n     Il y a bien longtemps, dans une galaxie lointaine, tr√®s lointaine.... \n\n")
        tim5()

        print("\n\n Dans une √©poque de Croisade, une guerre sanglante fait rage dans la Plan√®te "+'\033[31m'+"Arrakis"+'\033[0m'".")
        print(" Deux grandes Maisons, Ordos et Harkonnen, se font faces pour la convoitise de "+'\033[33m'+"l‚Äô√âpice"+'\033[0m'+",") 
        print(" une ressource qui donnerai la victoire strat√©giquement √† celui qui en d√©tiendrait.\n")
        tim10()

        print("\nUne plaisibe cit√© ,Atr√©ides, o√π r√©gn√© la paix, l'√©ducation, la culture pr√®s de la province d'Izmir, dirig√©e par l'Emir Leto.") 
        print("Mais le Khalife d'Harkonnen d√©cida d'attaquer la cit√© pr√®s d'Izmir, avec sa grande arm√©e et des mercenaires, pour avoir un avantage g√©ographique.")
        print("\nIl en profita pour assassiner Leto, √©pouser sa femme Jessica de force, et il banni de la cit√© en √©pargnant son fils h√©titier du tr√¥ne: "+'\033[37m'+PlayerID+'\033[0m')
        print()
        print("  Te voil√† perdu au fin fond du d√©sert d'Arrakis...")
        input("\n (Appuie sur entrer pour commencer) ")
        clear()
      OpeningCrawl()
    
      character = {"name": PlayerID,
                    "level": 1,
                    "currentExp": 0,
                    "nextLevelExp": 20,
                    "health": 1000,
                    "attack": 300,
                    "defense": 100,
                    "currentPositionOnMap" : {"coordX" : 2, "coordY" : 2},  # on mets les coordonn√©es de la case o√π on commence, ici au milieu
                    "inventory": []}
        #character["inventory"].append(inventoryObject_AttackBoost.copy())

      gameMap = [[{"symbol" : ' ', "isACase" : False, "completed" : False}, {"symbol" : ' ', "isACase" : False, "completed" : False}, {"symbol" : '#', "isACase" : True, "completed" : False}, {"symbol" : ' ', "isACase" : False, "completed" : False}, {"symbol" : ' ', "isACase" : False, "completed" : False}],
                  [{"symbol" : ' ', "isACase" : False, "completed" : False}, {"symbol" : '#', "isACase" : True, "completed" : False}, {"symbol" : '#', "isACase" : True, "completed" : False}, {"symbol" : '#', "isACase" : True, "completed" : False}, {"symbol" : ' ', "isACase" : False, "completed" : False}],
                  [{"symbol" : '#', "isACase" : True, "completed" : False}, {"symbol" : '#', "isACase" : True, "completed" : False}, {"symbol" : '+', "isACase" : True, "completed" : True}, {"symbol" : '#', "isACase" : True, "completed" : False}, {"symbol" : '#', "isACase" : True, "completed" : False}],
                  [{"symbol" : ' ', "isACase" : False, "completed" : False}, {"symbol" : '#', "isACase" : True, "completed" : False}, {"symbol" : '#', "isACase" : True, "completed" : False}, {"symbol" : '#', "isACase" : True, "completed" : False}, {"symbol" : ' ', "isACase" : False, "completed" : False}],
                  [{"symbol" : ' ', "isACase" : False, "completed" : False}, {"symbol" : ' ', "isACase" : False, "completed" : False}, {"symbol" : '#', "isACase" : True, "completed" : False}, {"symbol" : ' ', "isACase" : False, "completed" : False}, {"symbol" : ' ', "isACase" : False, "completed" : False}]]

  

    # BOUCLE DE JEU : on joue tant que l'utilisateur n'a pas demand√© √† quitter OU qu'il n'a pas battu le boss final
    continuePlaying = True
    while continuePlaying == True and boss["health"] > 0:
        # On affiche la map et on demande √† l'utilisateur ce qu'il veut faire
        printMap(gameMap, character["currentPositionOnMap"]["coordX"], character["currentPositionOnMap"]["coordY"])
        userChoice = printGameMenu()
        moving = False  # par d√©faut, √† chaque tour
        previousCoordX = character["currentPositionOnMap"]["coordX"]
        previousCoordY = character["currentPositionOnMap"]["coordY"]

        # Tests de son choix
        if userChoice == "N" or userChoice == "n":
            # On v√©rifie si on peut se d√©placer
            caseX = character["currentPositionOnMap"]["coordX"] - 1
            caseY = character["currentPositionOnMap"]["coordY"]
            if caseX >= 0 and gameMap[caseX][caseY]["isACase"] == True:
                print("vous allez au nord !")
                moving = True
            else:
                print("Vous ne pouvez pas aller au nord de v√¥tre position actuelle.")

        elif userChoice == "W" or userChoice == "w":
            # On v√©rifie si on peut se d√©placer
            caseX = character["currentPositionOnMap"]["coordX"]
            caseY = character["currentPositionOnMap"]["coordY"] - 1
            if caseY >= 0 and gameMap[caseX][caseY]["isACase"] == True:
                print("Vous allez √† l'ouest !")
                moving = True
            else:
                print("Vous ne pouvez pas aller √† l'ouest de v√¥tre position actuel.")

        elif userChoice == "E" or userChoice == "e":
            # On v√©rifie si on peut se d√©placer
            caseX = character["currentPositionOnMap"]["coordX"]
            caseY = character["currentPositionOnMap"]["coordY"] + 1
            if caseY < len(gameMap[caseX]) and gameMap[caseX][caseY]["isACase"] == True:
                print("Vous allez √† l'est !")
                moving = True
            else:
                print("Vous ne pouvez pas aller √† l'ouest de v√¥tre position actuelle.")


        elif userChoice == "S" or userChoice == "s":
            # On v√©rifie si on peut se d√©placer
            caseX = character["currentPositionOnMap"]["coordX"] + 1
            caseY = character["currentPositionOnMap"]["coordY"]
            if caseX < len(gameMap) and gameMap[caseX][caseY]["isACase"] == True:
                print("Vous allez au Sud !")
                moving = True
            else:
                print("Vous ne pouvez pas aller plus au Sud de v√¥tre position.")

        # Si on veut sauvegarder
        elif userChoice == "V":
            print("On ne malheureusement peut pas sauvegarder sur colab...")

        # Si on veut quitter
        elif userChoice == "Q":
            print("Etes-vous certain de vouloir quitter le jeu? ?\n1.  Oui\n2.  Non")
            userChoice = input("> ")

            if userChoice == "1":
                print("Vous quittez le jeu")
                continuePlaying = False
            elif userChoice == "2":
                print("Vous ne quittez pas le jeu. vous revenez au menu precedent...")
            else:
                print("Votre option est invalide.")

        else:
            print("Option invalide. Les seuls options possible sont celles ci : N (Aller au nord), W (Aller √† l'ouestt), E (Aller √† l'est), S (Aller au sud), V (Sauvgarder m√™me si c'est impossible sur colab), Q (Quitter le jeu).\n")


        # Si on se d√©place, on va lancer un √©v√®nement
        if moving == True :
            # On met √† jour la position du personnage
            character["currentPositionOnMap"]["coordX"] = caseX
            character["currentPositionOnMap"]["coordY"] = caseY

            # Si la case n'a pas √©t√© compl√©t√©e, on lance un √©v√®nement
            if gameMap[caseX][caseY]["completed"] == False:
                # On v√©rifie si c'est la case du boss
                if caseX == bossPositionOnMap["coordX"] and caseY == bossPositionOnMap["coordY"]:
                    character, fightState = fight(character, boss)

                    # Si le boss final a √©t√© vaincu
                    if fightState == "ended":
                        print("\n\n   F√©licitation ! Tu as battu le Boss !")
                        boss["health"] = 0
                        # On marque la case comme compl√©t√©e
                        gameMap[caseX][caseY]["completed"] = True

                    # Si on a fui le combat
                    elif fightState == "escaped":
                        print("Vous esquivez le combat ! Vous retournez √† v√¥tre pr√©cedente position")
                        character["currentPositionOnMap"]["coordX"] = previousCoordX
                        character["currentPositionOnMap"]["coordY"] = previousCoordY

                    # Si on est mort
                    elif fightState == "dead":
                        print("Vous avez perdu ! vous retournez au menu principal !")
                        time.sleep(2)
                        return

                else:
                    probaFight = 60
                    probaObject = 40
                    proba = randint(1, 100)
                    #print(proba)

                    # Find an object
                    if proba <= probaObject:
                        print("\nVous trouvez un object : ", end="")
                        proba2 = randint(0, 2)
                        if proba2 == 0:
                            character["inventory"].append(inventoryObject_PotionHealth.copy())
                            print(f'{inventoryObject_PotionHealth["name"]}')
                        elif proba2 == 1:
                            character["inventory"].append(inventoryObject_AttackBoost.copy())
                            print(f'{inventoryObject_AttackBoost["name"]}')
                        elif proba2 == 2:
                            character["inventory"].append(inventoryObject_DefenseBoost.copy())
                            print(f'{inventoryObject_DefenseBoost["name"]}')
                        # On marque la case comme compl√©t√©e
                        gameMap[caseX][caseY]["completed"] = True

                    # Have a fight
                    else:
                        character, fightState = fight(character, basicEnnemy.copy())

                        # Si on a gagn√© le combat, l'√©v√®nement est termin√©
                        if fightState == "ended":
                            # On marque la case comme compl√©t√©e
                            gameMap[caseX][caseY]["completed"] = True

                        # Si on a fui le combat
                        elif fightState == "escaped":
                            print("\n Tu as fui le combat, tu as d√©shonor√© ta famille !! Retour √† la position pr√©c√®dente...")
                            character["currentPositionOnMap"]["coordX"] = previousCoordX
                            character["currentPositionOnMap"]["coordY"] = previousCoordY

                        # Si on est mort
                        elif fightState == "dead":
                            print("Game Over ! Retourner au menu !")
                            return

            # Sinon la case a d√©j√† √©t√© faite, on affiche juste un message
            else:
                print("\n Vous √™tes deja venu ici auparavant. ")


        print("\n")



def printMap(_map, playerCoordX, playerCoordY):
    print("\n   ARRAKIS\n")
    print("=============")
    for i in range(0, len(_map)):
        print("|", end=" ")
        for j in range(0, len(_map[i])):
            if playerCoordX == i and playerCoordY == j:
                print("@", end=" ")
            elif _map[i][j]["isACase"] == True:
                if _map[i][j]["completed"] == True and _map[i][j]["symbol"] == "#":
                    _map[i][j]["symbol"] = "+"
                print(_map[i][j]["symbol"], end=" ")
            else:
                print(" ", end=" ")
        print("|")
    print("=============")



def printGameMenu():
    print("\n O√π voulez-vous aller ?")
    print("   ‚Üë N ‚Üë ")
    print(" ‚Üê       ‚Üí")
    print(" W       E")
    print(" ‚Üê       ‚Üí")
    print("   ‚Üì S ‚Üì ")
    print("\nV.  Sauvegarder")
    print("Q.  Quitter le jeu.")
    choice = input("\n > ")
    return choice

def fight(_character, _ennemy):
    

    # Combats
    print("\033[31m\n   DEBUT DU COMBAT ! PR√âPAREZ-VOUS !\033[0m")
    initialAttack = _character['attack']
    initialDefense = _character['defense']
    """
    def PVbar (pv):
      emoredheart= "\u2764\ufe0f"
      emoblackheart="\u2764"
      if pv < 10 and pv > 0:
        pv1 = int(pv/10)
        pv = int(pv/)
        emoredheart="üíî"
        a = emoredheart+emoblackheart*(10-pv)
        return a
      else:
        pv = int (pv/10)
        b = emoredheart*pv+emoblackheart*(10-pv)
        return b
    """

    while _character["health"] > 0 and _ennemy["health"] > 0:
        print()
        print(f"{_character['name']}: {_character['health']} PV (LvL {_character['level']})       Vs       {_ennemy['name']}: {_ennemy['health']} PV (LvL {_ennemy['level']})")
        print()


        # Affichage du menu du mode combat
        print("\nQue voulez vous faire ?\n1. ‚öîÔ∏è Attaquer\n2.  Acceder √† mon inventaire\n3.  S'√©chapper")
        correctChoice = False

        while correctChoice == False:
            choice = input("\n> ")

            # Test du choix de l'utilisateur
            if choice == "1":
                print(" Vous avez decid√© d'attaquer")
                correctChoice = True

                # On calcule les d√©gats re√ßus par l'ennemi
                _ennemy['health'] -= attack(_character, _ennemy)

            elif choice == "2":
                if len(_character["inventory"]) == 0:
                    print(" Attention v√¥tre inventaire est vide!")
                    correctChoice = False

                else:
                    clear()
                    print("V√¥ici v√¥te inventaire:")
                    for i in range(0, len(_character["inventory"])):
                        print(f"{i+1}.  {_character['inventory'][i]['name']}")

                    correctChoice2 = False
                    while correctChoice2 == False:
                        choice2 = input("> ")

                        try:
                            choice2 = int(choice2)
                            if choice2 < 0 or choice2 > len(_character['inventory'])+1 :
                                raise ValueError
                            else:
                                # On applique l'effet de la potion
                                print(f" Vous utilisez l'objet suivant: {_character['inventory'][choice2-1]['name']}")

                                if _character['inventory'][choice2-1]["type"] == "potion":
                                    _character["health"] += _character['inventory'][choice2-1]["healthPointsGained"]

                                elif _character['inventory'][choice2-1]["type"] == "atkBoost":
                                    _character["attack"] += _character['inventory'][choice2-1]["boostValue"]

                                elif _character['inventory'][choice2-1]["type"] == "defBoost":
                                    _character["defense"] += _character['inventory'][choice2-1]["boostValue"]

                                # On retire l'objet de la liste
                                _character["inventory"].pop(choice2-1)
                                correctChoice2 = True

                        except ValueError:
                            print(f"Vous devez entrez un nombre entre 1 et  {len(_character['inventory'])+1} inclu.")

                    correctChoice = True

            elif choice == "3":
                print("Fuir !!")
                correctChoice = True
                return _character, "escaped"

            else:
                print("Option invalide. Choisir un nombre entre 1 et 3.")


        # C'est au tour de l'ennemi d'attaquer (il doit √™tre en vie)
        if _ennemy['health'] > 0:
            _character["health"] -= attack(_ennemy, _character)

    # En sortant de la boucle, on v√©rifie qui est mort
    if _character["health"] < 0:
        print("\n\n    ","‚ò†Ô∏è","Vous √™tes mort !\n\n")
        return _character, "dead"
    elif _ennemy["health"] < 0:
        print(f"\n       F√©licitation {_character['name']}!! Vous avez vaincu {_ennemy['name']}")
        # + calcul de l'exp
        previousLevel = _character['level']
        _character = calculateExp(_character, _ennemy, _ennemy['level'] * 10)

        # On restaure les possibles boost du combat (dans le cas o√π on a pas mont√© de niveau)
        if previousLevel == _character["level"]:
            _character['attack'] = initialAttack
            _character['defense'] = initialDefense

    return _character, "ended"


# Fonction qui r√©alise une attaque par "attacker" contre "defenser"
def attack(attacker, defenser):
    clear()
    degatsTotaux = int((attacker["attack"] / 10) - (defenser["defense"] / 50))
    print(f"{attacker['name']} a inflig√© {degatsTotaux} points de d√©g√¢ts : {defenser['name']} !")
    
    return degatsTotaux



# Fonction qui calcule l'exp√©rience gagn√©e
def calculateExp(_character, _ennemy, xp):
    _character["currentExp"] += xp
    while _character["currentExp"] >= _character["nextLevelExp"] :
        _character["level"] += 1
        print(f"Vous maintenant au level {_character['level']} !")
        _character["currentExp"] = _character["currentExp"] - _character["nextLevelExp"]
        _character["nextLevelExp"] = _character["nextLevelExp"] * 2

        # + augmenter les stats
        _character["health"] = 1000 + (_character["level"] * 5)
        _character["attack"] = 100 + (_character["level"] * 5)
        _character["defense"] = 100 + (_character["level"] * 5)

    return _character


# Lancement du main
main()
